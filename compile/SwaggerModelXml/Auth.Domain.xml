<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Auth.Domain</name>
    </assembly>
    <members>
        <member name="P:Auth.Domain.Aggregates.AggregateRoot.Modification">
            <summary>
            Aggregation 是否有更新 ,,
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.AggregateRoot.UpdateTime">
            <summary>
            更新時間
            </summary>
        </member>
        <member name="M:Auth.Domain.Aggregates.AggregateRoot.Modify">
            <summary>
            紀錄 Aggregation 被更新過了
            </summary>
        </member>
        <member name="M:Auth.Domain.Aggregates.AggregateRoot.AddEvent(MediatR.IRequest{OneOf.OneOf{System.Boolean,Auth.Domain.Errors.Failure}})">
            <summary>
            增加事件
            </summary>
            <param name="event"></param>
        </member>
        <member name="M:Auth.Domain.Aggregates.AggregateRoot.ClearEvents">
            <summary>
             取得所有發生的領域事件
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.PasswordUpdate.Id">
            <summary>
            使用者的 Email 
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.PasswordUpdate.RemainTry">
            <summary>
            剩下幾次嘗試機會
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.PasswordUpdate.Code">
            <summary>
            驗證碼
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.PasswordUpdate.BeenVerified">
            <summary>
            是否驗證通過
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.PasswordUpdate.SecurityStamp">
            <summary>
            驗證成功後, 拿來跟使用者做身份比對用的
            </summary>
        </member>
        <member name="M:Auth.Domain.Aggregates.PasswordUpdate.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            給 Repository 用的
            </summary>
        </member>
        <member name="M:Auth.Domain.Aggregates.PasswordUpdate.#ctor(System.String)">
            <summary>
            申請密碼更新的
            </summary>
            <param name="email"></param>
        </member>
        <member name="M:Auth.Domain.Aggregates.PasswordUpdate.VerifyCode(System.Int32)">
            <summary>
            驗證驗證碼, 成功返回 true, 失敗返回 false 
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Aggregates.PasswordUpdate.IfReadyToUpdatePassword(System.String)">
            <summary>
            是否驗證完畢,已經準備好可以註冊了
            </summary>
            <param name="securityStamp"></param>
        </member>
        <member name="M:Auth.Domain.Aggregates.PasswordUpdate.Update(Auth.Domain.Aggregates.User,System.String)">
            <summary>
            啟動 - 註冊 - 事件
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.Registration.Id">
            <summary>
            登記郵箱當作 Identity
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.Registration.RemainTry">
            <summary>
            剩下幾次嘗試機會
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.Registration.Code">
            <summary>
            驗證碼
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.Registration.BeenVerified">
            <summary>
            是否驗證通過
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.Registration.SecurityStamp">
            <summary>
            驗證成功後, 拿來跟使用者做身份比對用的
            </summary>
        </member>
        <member name="M:Auth.Domain.Aggregates.Registration.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            給 Repository 用的
            </summary>
        </member>
        <member name="M:Auth.Domain.Aggregates.Registration.#ctor(System.String)">
            <summary>
            給 Factory 建立註冊資量用的
            </summary>
            <param name="email"></param>
        </member>
        <member name="M:Auth.Domain.Aggregates.Registration.VerifyCode(System.Int32)">
            <summary>
            驗證驗證碼, 成功返回 true, 失敗返回 false 
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Aggregates.Registration.IfReadyToRegister(System.String)">
            <summary>
            是否驗證完畢,已經準備好可以註冊了
            </summary>
            <param name="securityStamp"></param>
        </member>
        <member name="M:Auth.Domain.Aggregates.Registration.RegisterForUser(System.String)">
            <summary>
            啟動 - 註冊會員 - 事件
            </summary>
        </member>
        <member name="M:Auth.Domain.Aggregates.Registration.RegisterForStaff(System.String)">
            <summary>
            啟動 - 註冊後台人員 - 事件
            </summary>
            <param name="password"></param>
        </member>
        <member name="P:Auth.Domain.Aggregates.Staff.Id">
            <summary>
            使用者 - ID
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.Staff.Email">
            <summary>
             使用者 - 郵箱
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.Staff.EmailConfirmed">
            <summary>
            郵箱是否確認了
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.Staff.CallingCode">
            <summary>
            國家碼
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.Staff.Phone">
            <summary>
            電話號碼
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.Staff.PhoneConfirmed">
            <summary>
            電話是否否確認過了
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.Staff.Password">
            <summary>
            密碼
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.Staff.SecurityStamp">
            <summary>
            安全鎖
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.Staff.RefreshToken">
            <summary>
            Refresh Token
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.Staff.RefreshTokenExpiryTime">
            <summary>
            Refresh Token 過期時間
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.Staff.DeviceToken">
            <summary>
            登入裝置令牌
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.Staff.DeviceType">
            <summary>
            登入裝置型號
            </summary>
        </member>
        <member name="M:Auth.Domain.Aggregates.Staff.#ctor">
            <summary>
            給 ORM 使用的
            </summary>
        </member>
        <member name="M:Auth.Domain.Aggregates.Staff.#ctor(System.Int64,System.String,System.String,System.String,System.DateTime)">
            <summary>
            給 Repository 當中 Redis Cache
            </summary>
            <param name="id"></param>
            <param name="email"></param>
            <param name="securityStamp"></param>
            <param name="refreshToken"></param>
            <param name="refreshTokenExpiryTime"></param>
        </member>
        <member name="M:Auth.Domain.Aggregates.Staff.#ctor(System.Int64,System.String,Auth.Domain.ValueObjects.Password)">
            <summary>
            建立使用者
            </summary>
            <param name="id"></param>
            <param name="email"></param>
            <param name="password"></param>
        </member>
        <member name="M:Auth.Domain.Aggregates.Staff.RefreshSecurityParams(System.Int32)">
            <summary>
            更新 Token 所需要得參數, User 有任何改變都要來一遍
            </summary>
        </member>
        <member name="M:Auth.Domain.Aggregates.Staff.Login(System.String,System.String)">
            <summary>
             登入
            </summary>
            <param name="deviceType"></param>
            <param name="deviceToken"></param>
        </member>
        <member name="M:Auth.Domain.Aggregates.Staff.SetDeviceToken(System.String,System.String)">
            <summary>
            設置裝置令牌(每次請求的時候,會觸發一次)
            </summary>
            <param name="deviceType"></param>
            <param name="deviceToken"></param>
        </member>
        <member name="M:Auth.Domain.Aggregates.Staff.EditPassword(Auth.Domain.ValueObjects.Password)">
            <summary>
            更改密碼
            </summary>
            <param name="password"></param>
        </member>
        <member name="M:Auth.Domain.Aggregates.Staff.Logout">
            <summary>
            登出
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.User.Id">
            <summary>
            使用者 - ID
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.User.Email">
            <summary>
             使用者 - 郵箱
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.User.EmailConfirmed">
            <summary>
            郵箱是否確認了
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.User.CallingCode">
            <summary>
            國家碼
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.User.Phone">
            <summary>
            電話號碼
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.User.PhoneConfirmed">
            <summary>
            電話是否否確認過了
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.User.Password">
            <summary>
            密碼
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.User.SecurityStamp">
            <summary>
            安全鎖
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.User.RefreshToken">
            <summary>
            Refresh Token
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.User.RefreshTokenExpiryTime">
            <summary>
            Refresh Token 過期時間
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.User.DeviceToken">
            <summary>
            登入裝置令牌
            </summary>
        </member>
        <member name="P:Auth.Domain.Aggregates.User.DeviceType">
            <summary>
            登入裝置型號
            </summary>
        </member>
        <member name="M:Auth.Domain.Aggregates.User.#ctor">
            <summary>
            給 ORM 使用的
            </summary>
        </member>
        <member name="M:Auth.Domain.Aggregates.User.#ctor(System.Int64,System.String,System.String,System.String,System.DateTime)">
            <summary>
            給 Repository 當中 Redis Cache
            </summary>
            <param name="id"></param>
            <param name="email"></param>
            <param name="securityStamp"></param>
            <param name="refreshToken"></param>
            <param name="refreshTokenExpiryTime"></param>
        </member>
        <member name="M:Auth.Domain.Aggregates.User.#ctor(System.Int64,System.String,Auth.Domain.ValueObjects.Password)">
            <summary>
            建立使用者
            </summary>
            <param name="id"></param>
            <param name="email"></param>
            <param name="password"></param>
        </member>
        <member name="M:Auth.Domain.Aggregates.User.RefreshSecurityParams(System.Int32)">
            <summary>
            更新 Token 所需要得參數, User 有任何改變都要來一遍
            </summary>
        </member>
        <member name="M:Auth.Domain.Aggregates.User.Login(System.String,System.String)">
            <summary>
             登入
            </summary>
            <param name="deviceType"></param>
            <param name="deviceToken"></param>
        </member>
        <member name="M:Auth.Domain.Aggregates.User.SetDeviceToken(System.String,System.String)">
            <summary>
            設置裝置令牌(每次請求的時候,會觸發一次)
            </summary>
            <param name="deviceType"></param>
            <param name="deviceToken"></param>
        </member>
        <member name="M:Auth.Domain.Aggregates.User.EditPassword(Auth.Domain.ValueObjects.Password)">
            <summary>
            更改密碼
            </summary>
            <param name="password"></param>
        </member>
        <member name="M:Auth.Domain.Aggregates.User.Logout">
            <summary>
            登出
            </summary>
        </member>
        <member name="P:Auth.Domain.Entities.IEntityBase`1.Id">
            <summary>
            每一個 entity 都必須要有一個獨一無二的 Identity
            </summary>
        </member>
        <member name="F:Auth.Domain.Enums.VerificationStatus.Success">
            <summary>
            驗證成功
            </summary>
        </member>
        <member name="F:Auth.Domain.Enums.VerificationStatus.Fail">
            <summary>
            驗證失敗
            </summary>
        </member>
        <member name="F:Auth.Domain.Enums.VerificationStatus.HaveNoChance">
            <summary>
            驗證失敗, 並且, 驗證太多次了, 沒有機會了
            </summary>
        </member>
        <member name="P:Auth.Domain.Errors.Failure.Code">
            <summary>
            自定義錯誤碼
            </summary>
        </member>
        <member name="P:Auth.Domain.Errors.Failure.Message">
            <summary>
            錯誤訊息
            </summary>
        </member>
        <member name="P:Auth.Domain.Errors.Failure.Type">
            <summary>
            錯誤種類(BadRequest或其他)
            </summary>
        </member>
        <member name="M:Auth.Domain.Errors.Failure.BadRequest(System.String,System.String)">
            <summary>
            BadRequest - 400
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Errors.Failure.UnAuthorized(System.String,System.String)">
            <summary>
            UnAuthorized - 401
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Errors.Failure.Forbidden(System.String,System.String)">
            <summary>
            Forbidden - 403
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Errors.Failure.Conflict(System.String,System.String)">
            <summary>
            Conflict - 409
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Errors.Failure.UnProcessableEntity(System.String,System.String)">
            <summary>
            UnProcessableEntity - 422
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="F:Auth.Domain.Errors.FailureType.BadRequest">
            <summary>
            General Error
            </summary>
        </member>
        <member name="F:Auth.Domain.Errors.FailureType.UnAuthorized">
            <summary>
            使用者身份未被認證
            </summary>
        </member>
        <member name="F:Auth.Domain.Errors.FailureType.Forbidden">
            <summary>
            使用者權限不夠
            </summary>
        </member>
        <member name="F:Auth.Domain.Errors.FailureType.Conflict">
            <summary>
            會使伺服器(會是資料)產生衝突
            </summary>
        </member>
        <member name="F:Auth.Domain.Errors.FailureType.UnProcessableEntity">
            <summary>
            資料格式不對
            </summary>
        </member>
        <member name="T:Auth.Domain.Events.Registrations.ReadyToRegisterUserEvent">
            <summary>
            註冊 - 事件
            </summary>
            <param name="Email"></param>
            <param name="Password"></param>
        </member>
        <member name="M:Auth.Domain.Events.Registrations.ReadyToRegisterUserEvent.#ctor(System.String,System.String)">
            <summary>
            註冊 - 事件
            </summary>
            <param name="Email"></param>
            <param name="Password"></param>
        </member>
        <member name="P:Auth.Domain.Events.Registrations.ReadyToRegisterUserEvent.Email">
            <summary></summary>
        </member>
        <member name="P:Auth.Domain.Events.Registrations.ReadyToRegisterUserEvent.Password">
            <summary></summary>
        </member>
        <member name="T:Auth.Domain.Events.Updating.ApplyUpdatePasswordEvent">
            <summary>
            申請更新密碼事件
            </summary>
        </member>
        <member name="M:Auth.Domain.Events.Updating.ApplyUpdatePasswordEvent.#ctor(System.String,System.Int32)">
            <summary>
            申請更新密碼事件
            </summary>
        </member>
        <member name="M:Auth.Domain.Factories.Aggregates.IPasswordUpdateFactory.Create(System.String)">
            <summary>
            使用者註冊後建立一比註冊資料
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Factories.Aggregates.IPasswordUpdateFactory.Reconstruct(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            給 Repository 重建資料用的
            </summary>
            <param name="email"></param>
            <param name="remainTry"></param>
            <param name="code"></param>
            <param name="beenVerified"></param>
            <param name="securityStamp"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Factories.Aggregates.IRegistrationFactory.Create(System.String)">
            <summary>
            使用者註冊後建立一比註冊資料
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Factories.Aggregates.IRegistrationFactory.Reconstruct(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            給 Repository 重建資料用的
            </summary>
            <param name="email"></param>
            <param name="remainTry"></param>
            <param name="code"></param>
            <param name="beenVerified"></param>
            <param name="securityStamp"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Factories.Aggregates.IStaffFactory.Create(System.String,Auth.Domain.ValueObjects.Password)">
            <summary>
            註冊新用戶
            </summary>
            <param name="email"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Factories.Aggregates.IStaffFactory.ReConstruct(System.Int64,System.String,System.String,System.String,System.DateTime)">
            <summary>
            給 Redis 快取使用的
            </summary>
            <param name="id"></param>
            <param name="email"></param>
            <param name="securityStamp"></param>
            <param name="refreshToken"></param>
            <param name="refreshTokenExpiryTime"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Factories.Aggregates.IUserFactory.Create(System.String,Auth.Domain.ValueObjects.Password)">
            <summary>
            註冊新用戶
            </summary>
            <param name="email"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Factories.Aggregates.IUserFactory.ReConstruct(System.Int64,System.String,System.String,System.String,System.DateTime)">
            <summary>
            給 Redis 快取使用的
            </summary>
            <param name="id"></param>
            <param name="email"></param>
            <param name="securityStamp"></param>
            <param name="refreshToken"></param>
            <param name="refreshTokenExpiryTime"></param>
            <returns></returns>
        </member>
        <member name="T:Auth.Domain.Policies.IPolicy`1">
            <summary>
            Policy Pattern
            https://www.codeproject.com/Tips/1175911/Domain-Policy-for-Domain-Driven-Design
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Auth.Domain.Policies.IPolicy`1.IsApplicable(Auth.Domain.Policies.IPolicyData)">
            <summary>
            是否符合條件, 若符合條件 GenerateItems 給出的 items 都可以拿來運用
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Policies.IPolicy`1.GenerateItems(Auth.Domain.Policies.IPolicyData)">
            <summary>
            產生出符合條件得 Items
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Auth.Domain.Policies.IPolicyData">
            <summary>
            Marker Interface, 用來判斷是否符合條件用的參數
            </summary>
        </member>
        <member name="M:Auth.Domain.Repositories.IPasswordUpdateRepository.AddAsync(Auth.Domain.Aggregates.PasswordUpdate)">
            <summary>
            新增
            </summary>
            <param name="passwordUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IPasswordUpdateRepository.UpdateAsync(Auth.Domain.Aggregates.PasswordUpdate)">
            <summary>
            更新
            </summary>
            <param name="passwordUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IPasswordUpdateRepository.GetAsync(System.String)">
            <summary>
            取得
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IPasswordUpdateRepository.DeleteAsync(Auth.Domain.Aggregates.PasswordUpdate)">
            <summary>
            刪除
            </summary>
            <param name="passwordUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IRegistrationRepository.GetAsync(System.String)">
            <summary>
            取得 - 註冊資料 (Email 是註冊資量的 Identity)
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IRegistrationRepository.AddAsync(Auth.Domain.Aggregates.Registration)">
            <summary>
            建立 - 註冊資料
            </summary>
            <param name="registration"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IRegistrationRepository.UpdateAsync(Auth.Domain.Aggregates.Registration)">
            <summary>
            更新 - 註冊資料
            </summary>
            <param name="registration"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IRegistrationRepository.DeleteAsync(Auth.Domain.Aggregates.Registration)">
            <summary>
            刪除 - 註冊資料
            </summary>
            <param name="registration"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IStaffRepository.CacheAddAsync(Auth.Domain.Aggregates.Staff)">
            <summary>
            處存到快取
            </summary>
            <param name="staff"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IStaffRepository.CacheGetAsync(System.Int64)">
            <summary>
            從快取取得使用者
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IStaffRepository.CacheDeleteAsync(Auth.Domain.Aggregates.Staff)">
            <summary>
            刪除快取
            </summary>
            <param name="staff"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IStaffRepository.GetAsync(System.Int64)">
            <summary>
            取得使用者
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IStaffRepository.GetStaffByEmailAsync(System.String)">
            <summary>
            透過郵箱取得使用者
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IStaffRepository.Add(Auth.Domain.Aggregates.Staff)">
            <summary>
            建立使用者
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IStaffRepository.Update(Auth.Domain.Aggregates.Staff)">
            <summary>
            更新使用者
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IUserRepository.CacheAddAsync(Auth.Domain.Aggregates.User)">
            <summary>
            處存到快取
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IUserRepository.CacheGetAsync(System.Int64)">
            <summary>
            從快取取得使用者
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IUserRepository.CacheDeleteAsync(Auth.Domain.Aggregates.User)">
            <summary>
            刪除快取
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IUserRepository.GetAsync(System.Int64)">
            <summary>
            取得使用者
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IUserRepository.GetUserByEmailAsync(System.String)">
            <summary>
            透過郵箱取得使用者
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IUserRepository.Add(Auth.Domain.Aggregates.User)">
            <summary>
            建立使用者
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Auth.Domain.Repositories.IUserRepository.Update(Auth.Domain.Aggregates.User)">
            <summary>
            更新使用者
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="P:Auth.Domain.ValueObjects.Password.HashPassword">
            <summary>
            密碼哈希
            </summary>
        </member>
        <member name="P:Auth.Domain.ValueObjects.Password.Salt">
            <summary>
            鹽
            </summary>
        </member>
        <member name="M:Auth.Domain.ValueObjects.Password.op_Implicit(Auth.Domain.ValueObjects.Password)~System.ValueTuple{System.String,System.String}">
            <summary>
            dto -> tuple
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:Auth.Domain.ValueObjects.RegistrationInformation.Email">
            <summary>
            使用者 - 郵箱
            </summary>
        </member>
        <member name="P:Auth.Domain.ValueObjects.RegistrationInformation.UserName">
            <summary>
            使用者 - 名稱
            </summary>
        </member>
        <member name="P:Auth.Domain.ValueObjects.RegistrationInformation.CompanyName">
            <summary>
            公司 - 名稱
            </summary>
        </member>
        <member name="P:Auth.Domain.ValueObjects.RegistrationInformation.Latitude">
            <summary>
            緯度
            </summary>
        </member>
        <member name="P:Auth.Domain.ValueObjects.RegistrationInformation.Longitude">
            <summary>
            經度
            </summary>
        </member>
        <member name="P:Auth.Domain.ValueObjects.RegistrationInformation.FormattedAddress">
            <summary>
            完整地址
            </summary>
        </member>
        <member name="P:Auth.Domain.ValueObjects.RegistrationInformation.Password">
             <summary>
            使用者密碼
             </summary>
        </member>
        <member name="P:Auth.Domain.ValueObjects.Verification.Email">
            <summary>
            使用者郵箱
            </summary>
        </member>
        <member name="P:Auth.Domain.ValueObjects.Verification.Code">
            <summary>
            驗證碼
            </summary>
        </member>
        <member name="P:Auth.Domain.ValueObjects.Verification.Success">
            <summary>
            驗證通過
            </summary>
        </member>
        <member name="P:Auth.Domain.ValueObjects.Verification.RemainTry">
            <summary>
            剩餘次數
            </summary>
        </member>
        <member name="M:Auth.Domain.ValueObjects.Verification.#ctor">
            <summary>
            JsonSerializer 用
            </summary>
        </member>
        <member name="M:Auth.Domain.ValueObjects.Verification.#ctor(System.String)">
            <summary>
            註冊
            </summary>
            <param name="email"></param>
        </member>
        <member name="M:Auth.Domain.ValueObjects.Verification.#ctor(Auth.Domain.ValueObjects.Verification)">
            <summary>
            驗證失敗
            </summary>
            <param name="verification"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
    </members>
</doc>
